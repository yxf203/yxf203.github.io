{"meta":{"title":"fff从零开始的博客OvO","subtitle":"从零开始的……","description":"","author":"YXF","url":"https://yxf203.github.io","root":"/"},"pages":[{"title":"文章归档","date":"2024-01-07T14:50:17.394Z","updated":"2024-01-07T14:50:17.394Z","comments":true,"path":"archive.html","permalink":"https://yxf203.github.io/archive.html","excerpt":"","text":""},{"title":"","date":"2024-01-07T15:12:20.208Z","updated":"2024-01-07T15:12:20.208Z","comments":true,"path":"custom.css","permalink":"https://yxf203.github.io/custom.css","excerpt":"","text":":root { --gutter: 25px; --radius: 13px; --color-primary: #000; --color2: #ff761e; --color3: #ffb900; --color4: #33d57a; --color5: #00dbff; --color6: #1a98ff; --color7: #9090ff; --color-primary-bg: #d6ecf0; --color2-bg: rgba(255,118,30,0.15); --color3-bg: rgba(255,185,0,0.15); --color4-bg: rgba(51,213,122,0.15); --color5-bg: rgba(0,219,255,0.15); --color6-bg: rgba(26,152,255,0.15); --color7-bg: rgba(144,144,255,0.15); --color-shadow: rgba(161, 177, 204, 0.4); } .nexmoe-rainbow a { background-color: #d6ecf0; color: #000; box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.5); }"}],"posts":[{"title":"C. Closest Cities","slug":"Cities","date":"2024-01-25T05:32:46.000Z","updated":"2024-01-25T08:07:23.756Z","comments":true,"path":"2024/01/25/Cities/","link":"","permalink":"https://yxf203.github.io/2024/01/25/Cities/","excerpt":"","text":"题目链接：https://codeforces.com/contest/1922/problem/C （感觉已经是不少次遇到类似思路的题目了） 这道题企图每次query都从头开始算轻轻松松就tle啦！毕竟考虑最坏的情况，O(mn)甚至已经1e11啦。 tip:pink大人说时间复杂度最大到3e8就tle啦！⭐ 所以题目思路会优先把每个点到初始点花费的coins数目算出来，然后每次query的时候相减即可。 举个例子，e.g，查询city2到city5所花费的硬币数目，只需要 city1到city5的coins - city1到city2的coins即可啦。 这道题还有一个注意点是不仅有从左向右的query，也有从右向左的query，而左到右和右到左的coins很可能是不一样的。所以相处的解决方案是在计算一个最后一个城市到每个城市所花费的coins，而query时给出渐大的方式与上方例子相似。 另外还有一个本来以为会用到的infinity的最大值和最小值的点，不过没有用到就是啦，这边还是想做一下记录。 tips: 用0x3f3f3f3f表示无穷大，0x3f3f3f3f = 1061109567. 用0xc0c0c0c0表示负无穷大，0xc0c0c0c0 = -1061109568. 当然，如果只用于一般的比较，0xfffffff也可能是一个不错的选择。 题解代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;int m, n, a[100010];void distance(ll d[], ll md[])&#123; int i; d[1] = 0; md[n] = 0; d[2] = 1; md[n - 1] = 1; for(i = 2; i &lt; n; i++)&#123; ll d1 = a[i] - a[i - 1]; ll d2 = a[i + 1] - a[i]; if(d1 &lt; d2) d[i + 1] = d[i] + d2; else d[i + 1] = d[i] + 1; &#125; for(i = n - 1; i &gt; 0; i--)&#123; ll d1 = a[i] - a[i - 1]; ll d2 = a[i + 1] - a[i]; if(d1 &lt; d2) md[i - 1] = md[i] + 1; else md[i - 1] = md[i] + d1; &#125;&#125;int main()&#123; int t, i; ll d[100010], md[100010]; cin&gt;&gt;t; while(t--)&#123; cin&gt;&gt;n; for(i = 1; i &lt;= n; i++)&#123; cin&gt;&gt;a[i]; &#125; distance(d, md); cin&gt;&gt;m; for(i = 0; i &lt;m; i++)&#123; int a, b; cin&gt;&gt;a&gt;&gt;b; if(a &gt; b) cout&lt;&lt; md[b] - md[a] &lt;&lt;endl; else cout &lt;&lt; d[b] - d[a] &lt;&lt; endl; &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"Educational Codeforces Round 161 (Rated for Div. 2)","slug":"Educational-Codeforces-Round-161-Rated-for-Div-2","permalink":"https://yxf203.github.io/tags/Educational-Codeforces-Round-161-Rated-for-Div-2/"}]},{"title":"B. Forming Triangles","slug":"Triangles","date":"2024-01-25T04:52:31.000Z","updated":"2024-01-25T07:47:36.872Z","comments":true,"path":"2024/01/25/Triangles/","link":"","permalink":"https://yxf203.github.io/2024/01/25/Triangles/","excerpt":"","text":"ovo被督促好好写题解了呜呜 题目链接：https://codeforces.com/contest/1922/problem/B 解题的关键在于：The length of the i-th stick is 2ai , 即第i根棍子的长度为2的ai次方（不仔细审题的话就会寄掉！） 然后就转换为数学题了，而且是2的次方问题就简单了很多，单独对其可能的情况进行分析，其实只有下面两种情况： 三条边相同（等边）。 两条长边相同，短边只要比长边短即可（等腰）。 （注：这个数学合理性也很容易想出来，假设短的两边分别为2i, 2j,i&lt;=j,那么2i+2j&lt;=2j+1是显然的，因此剩下的最长边也只能为j。） 这样子解题思路也比较明了啦，只要通过以下两步即可完成： 1.利用桶的思想统计每个ai总共的数量。 2.利用排列组合的方式进行计算。 下面记录一下弱小可怜无助的本人的错误点： 因为觉得memset特别好用所以每次都拿来初始化，然后O(300010*3*t)直接TLE了。 一没读到第i根棍子的长度为2的ai次方，二没读到ai的范围还包括0，寄的明明白白一清二楚。 AC代码： 123456789101112131415161718192021222324252627282930313233343536#include&lt;bits/stdc++.h&gt;using namespace std;int a[300010], b[300010];int main()&#123; int m,n, num; long long t; long long sum; scanf(&quot;%d&quot;, &amp;m); while(m--)&#123; sum = 0; scanf(&quot;%d&quot;, &amp;n); num = 0;// memset(b, 0, sizeof(b));// memset(c, 0, sizeof(c));// memset(num, 0, sizeof(num)); for(int i = 0; i &lt; n; i++)&#123; scanf(&quot;%d&quot;, &amp;a[i]); b[a[i]]++; &#125; for(int i = 0; i &lt;= n; i++)&#123;// num[i] = num[i - 1] + b[i]; t = (long long)b[i]; if(t &gt;= 3) &#123; sum += t * (t - 1) * (t - 2) / 6; &#125; if(t &gt;= 2) &#123; sum += t * (t - 1) / 2 * num; &#125; num += b[i]; b[i] = 0; &#125; printf(&quot;%lld\\n&quot;, sum); &#125; return 0;&#125;","categories":[],"tags":[{"name":"Educational Codeforces Round 161 (Rated for Div. 2)","slug":"Educational-Codeforces-Round-161-Rated-for-Div-2","permalink":"https://yxf203.github.io/tags/Educational-Codeforces-Round-161-Rated-for-Div-2/"}]},{"title":"test","slug":"test","date":"2024-01-06T13:53:55.000Z","updated":"2024-01-06T13:54:42.775Z","comments":true,"path":"2024/01/06/test/","link":"","permalink":"https://yxf203.github.io/2024/01/06/test/","excerpt":"","text":"这是一个测试文件，仅用于测试是否可以添加。","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://yxf203.github.io/tags/test/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-01-06T13:13:14.041Z","updated":"2024-01-25T07:57:44.791Z","comments":true,"path":"2024/01/06/hello-world/","link":"","permalink":"https://yxf203.github.io/2024/01/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment 做一个记录 更换记录： 更换为了 hexo-renderer-markdown-it-plus","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Educational Codeforces Round 161 (Rated for Div. 2)","slug":"Educational-Codeforces-Round-161-Rated-for-Div-2","permalink":"https://yxf203.github.io/tags/Educational-Codeforces-Round-161-Rated-for-Div-2/"},{"name":"test","slug":"test","permalink":"https://yxf203.github.io/tags/test/"}]}